stages:
  - build
  - scan
  - deploy

build-job:
  stage: build
  image: docker:latest
#  variables:
#    DOCKER_CONTENT_TRUST: "1"
  before_script:
  - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - docker info
    - docker build --pull -t "$CI_REGISTRY_IMAGE" . 
    - docker push "$CI_REGISTRY_IMAGE"
#  when: manual


trivy_scan:
  stage: scan
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
#    TRIVY_USERNAME: "$CI_REGISTRY_USER"
#    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
#    TRIVY_AUTH_URL: "$CI_REGISTRY"
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
#    FULL_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  before_script:
    - apk update && apk add jq  # Устанавливаем jq
  script:
    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - time trivy clean --scan-cache
    - time trivy image --download-db-only
    # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
    - echo "Scanning image for CRITICAL and HIGH vulnerabilities..."
    - time trivy image --severity CRITICAL,HIGH --format json
        --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "$CI_REGISTRY_IMAGE"
    - time trivy image --severity CRITICAL "$CI_REGISTRY_IMAGE"
    - time trivy fs $CI_PROJECT_DIR/k8s --severity HIGH,CRITICAL --scanners misconfig
    # Подсчитываем только количество CRITICAL уязвимостей
    # Если количество CRITICAL больше 4, то прерываем пайплайн
    - |
      CRITICAL_COUNT=$(jq '.Results[].Vulnerabilities | map(select(.Severity == "CRITICAL")) | length' "$CI_PROJECT_DIR/gl-container-scanning-report.json" | awk '{s+=$1} END {print s}')
      echo "Found $CRITICAL_COUNT CRITICAL vulnerabilities."
      
      if [ "$CRITICAL_COUNT" -gt 4 ]; then
        echo "Pipeline failed due to $CRITICAL_COUNT CRITICAL vulnerabilities."
        exit 1
      fi
  cache:
    paths:
      - .trivycache/
  artifacts:
    when:                          always
    reports:
      container_scanning:          gl-container-scanning-report.json
#  when: manual

deploy-prod:
  stage: deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: [""]
  variables:
    NAMESPACE: "diplom"
    DEPLOYMENT_NAME: "diplom-app"
  script:
    - echo "Deploying to Kubernetes..."
    - echo $KUBECONFIG
    - export KUBECONFIG=$KUBECONFIG
    - kubectl apply -f k8s/
    - kubectl rollout restart deployment/${DEPLOYMENT_NAME} --namespace=${NAMESPACE}
  environment: production
  when: manual
