stages:
  - build
  - scan
  - deploy

build-job:
  stage: build
  image: docker:latest
  variables:
    TAG: v3
  before_script:
    - mkdir -p ~/.docker
    - echo "$NEXUS_CONFIG_JSON" > ~/.docker/config.json
  script:
    - docker info
    - docker build --pull -t $CI_REGISTRY_NEXUS_IMAGE:$TAG . 
    - docker push $CI_REGISTRY_NEXUS_IMAGE:$TAG
  only:
    changes:
      - Dockerfile

trivy_scan:
  stage: scan
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
    TAG: v3
    TRIVY_NO_PROGRESS: "true"
  before_script:
    - apk update && apk add jq  
  script:
    - trivy --version
    - time trivy image --download-db-only
    # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
    - echo "Scanning image for CRITICAL and HIGH vulnerabilities..."
    - time trivy image --severity CRITICAL,HIGH --format json
        --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "$CI_REGISTRY_NEXUS_IMAGE:$TAG"
    - time trivy image --severity CRITICAL "$CI_REGISTRY_NEXUS_IMAGE:$TAG"
    - echo "Vulnerabilities CVE-2023-6879 and CVE-2023-45853 are marked as not_affected"
    - echo "Marking specific vulnerabilities as not_affected..."
    - |
      jq --argjson vulns '["CVE-2023-6879", "CVE-2023-45853"]' '
        .Results[].Vulnerabilities |= map(
          if .VulnerabilityID | IN($vulns[]) then
            . + {not_affected: true}
          else
            .
          end
        )
      ' "$CI_PROJECT_DIR/gl-container-scanning-report.json" > \
      "$CI_PROJECT_DIR/gl-container-scanning-report-updated.json"
    # Подсчитываем только количество CRITICAL уязвимостей
    # Если количество CRITICAL 1 или больше, то прерываем пайплайн
    - echo "Counting critical vulnerabilities excluding not_affected..."
    - |
      CRITICAL_COUNT=$(jq '.Results[].Vulnerabilities | map(select(.Severity == "CRITICAL" and .not_affected != true)) | length' \
      "$CI_PROJECT_DIR/gl-container-scanning-report-updated.json" | awk '{s+=$1} END {print s}')
      echo "Found $CRITICAL_COUNT CRITICAL vulnerabilities."

      if [ "$CRITICAL_COUNT" -gt 0 ]; then
        echo "Pipeline failed due to $CRITICAL_COUNT CRITICAL vulnerabilities."
        exit 1
      fi

  artifacts:
    when: always
    reports:
      container_scanning: gl-container-scanning-report-updated.json
      
deploy-prod:
  stage: deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: [""]
  variables:
    NAMESPACE: "diplom"
    DEPLOYMENT_NAME: "diplom-app"
  needs:
   - job: trivy_scan
  script:
    - echo "Deploying to Kubernetes..."
    - echo $KUBECONFIG
    - export KUBECONFIG=$KUBECONFIG
    - kubectl apply -f k8s/
    - kubectl rollout restart deployment/${DEPLOYMENT_NAME} --namespace=${NAMESPACE}
#  rules:
#    - if:  $CI_PIPELINE_STATUS == 'success'
# $CI_COMMIT_BRANCH == 'main' &&
  environment: production
  when: manual
