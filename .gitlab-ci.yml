stages:
  - build
  - scan
  - deploy

build-job:
  stage: build
  image: docker:latest
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker info
    - docker build --pull -t "$CI_REGISTRY_IMAGE" . 
    - docker push "$CI_REGISTRY_IMAGE"
  when: manual


trivy_scan:
  stage: scan
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
#    TRIVY_USERNAME: "$CI_REGISTRY_USER"
#    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
#    TRIVY_AUTH_URL: "$CI_REGISTRY"
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
#    FULL_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  script:
    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - time trivy clean --scan-cache
    - time trivy image --download-db-only
    # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
    - time trivy image --exit-code 0 --format template --template "@/contrib/gitlab.tpl"
        --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "$CI_REGISTRY_IMAGE"
    - time trivy image --exit-code 0 --severity HIGH "$CI_REGISTRY_IMAGE"
    - time trivy image --exit-code 0 --severity CRITICAL "$CI_REGISTRY_IMAGE"
  cache:
    paths:
      - .trivycache/
  artifacts:
    when:                          always
    reports:
      container_scanning:          gl-container-scanning-report.json
  when: manual

deploy-prod:
  stage: deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: [""]
  variables:
    NAMESPACE: "diplom"
    DEPLOYMENT_NAME: "diplom-app"
  script:
    - echo "Deploying to Kubernetes..."
    - echo $KUBECONFIG
    - export KUBECONFIG=$KUBECONFIG
    - kubectl apply -f k8s/
    - kubectl rollout restart deployment/${DEPLOYMENT_NAME} --namespace=${NAMESPACE}
  environment: production
#  when: manual
